//Closures in Javascript
//A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment).

//Lexical Scope

//lexical scope: the variable defined outside the function can be accessible inside the another function defined a variable declaration but opposite is not true

//eg1
//global Scope
var userName = "Siddhesh";

function fn(){
  //local Scope
  console.log(userName);
}
fn();

//eg2
//Below Code will throw error (because as we said in lexical defination)
// function fn(){
//   var userName2 = "Sid";
// }

// console.log(userNmae2);


//eg3
//global scope
function first(){
  //inner scope 1
  var firstName = "Siddhesh";
  function displayName(){
    //inner scope 2
    console.log("My name is "+firstName);
  }
  displayName();
}
first();


//eg3
function init() {
  var name = "Mozilla"; // name is a local variable created by init
  function displayName(num) {
    // displayName() is the inner function, that forms the closure
    console.log(name,num); // use variable declared in the parent function
  }
  return displayName;
}

init()(5);

//note: Every closure has three scopes:

// 1 Local scope (Own scope)
// 2 Enclosing scope (can be block, function, or module scope)
// 3 Global scope

//eg4

// global scope
const e = 10;
function sum(a) {
  return function (b) {
    return function (c) {
      // outer functions scope (same for b and c)
      return function (d) {
        // local scope (same for b and c)
        return a + b + c + d + e;
      };
    };
  };
}

console.log(sum(1)(2)(3)(4)); // 20


//Q1 what will be logged to console

let count = 0;
(function printCount(){
  if(count === 0){
    let count = 1; //shadowing
    console.log(count); //1
  }
  console.log(count); //0
})();

//Q2 Write a function that would allow you to do this

function createBase(num){
  return function (innerNum){
    console.log(innerNum + num);
  };
}
var addsix = createBase(6);
addsix(10); // returns 16
addsix(15); // returns 21

//Q3 Time Optimization


// function find(index){
//   let a = [];
//   for(let i = 0; i< 1000000; i++){
//     a[i] = i * i;
//   }
//   console.log(a[index]);
// }

// console.time("6");
// find(6); 
// console.timeEnd("6");

// console.time("30");
// find(30);
// console.timeEnd("30");

//above code is optimized by closure below

function find(){
  let a = [];
  for(let i = 0; i< 1000000; i++){
    a[i] = i * i;
  }
  return function (index){
  console.log(a[index]);
  }
}

var closure = find();

console.time("6");
closure(6); 
console.timeEnd("6");

console.time("30");
closure(30);
console.timeEnd("30");

//Q4 setTimeout Output amd Block Scope

// function a(){
//   for(var i = 0; i < 3;i++){ //due to var as it is function scope it will print 333
//     setTimeout(function (){
//       console.log(i); //what is logged?
//     }, i * 1000);
//   }
// }
// a();

//so use 'let' because it is block scope

function a(){
  for(let i = 0; i < 3;i++){ 
    setTimeout(function (){
      console.log(i); //what is logged?
    }, i * 1000);
  }
}
a();

//If you want to use only var no let then use of closure in it see below code

// for(let i=0;i<5;i++){
//   function inner(i){
//     setTimeout(function (){
//       console.log(i); //what is logged?
//     }, i * 1000);
//   }
//   inner(i);
// }


//Q5 How would you use a closure to create a private counter? also called module patten

function count1(){

  var counter = 0;

  function add(increment){
    counter += increment;
  }

  function retrive(){
    return "Counter: "+ counter;
  }

  return{
    add,
    retrive
  };
  
}
const c = count1();
c.add(6);
c.add(5);
console.log(c.retrive());

//Q6 What is Module Patten ? =>Must read more about it

var Module = (function (){

  function privateMethod(){
    console.log("Private");
  }

  return{
    publicMethod: function (){
      console.log("public");
      privateMethod(); //it should be called here.
    },
  };
})();

Module.publicMethod();
//Module.privateMethod(); //we cannot call like this in Module Patten


//Q7 Make this run only once

function once(){
  let count = 0;

  return function(){
  if(count === 0){
    console.log("Hi! Feel free to star this repo");
    count++;
  }else{
    console.log("Already mark as star");
  }
  };
}

let grab = once();
grab();
grab();
grab();