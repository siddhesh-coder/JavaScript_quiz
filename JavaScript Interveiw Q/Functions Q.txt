//Q.1 What is Function Declarations?

function square(num){
  return num * num;
}

console.log(square(4));

//Q.2 what is Function Expression?

const variable = function (num){
  return num * num;
}

console.log(variable(4));

//Note: function inside the variable is called as Anonymous function(no name of function)

//Q.3 What are the First Class Function? IMP Q

//Language where function can be treaded like a variable.

function square(num){
   return num*num;
}

function displaySquare(fn){
  return fn(5);
}

console.log(displaySquare(square));

//Q.4 What is IIFE?

//IIFE stands for "Immediately Invoked Function Expression."
//Note:IIFEs are often used in situations where you want to encapsulate code, create modules, or ensure that variables and functions do not interfere with other parts of your application. With modern JavaScript and the introduction of block-scoped variables using let and const, IIFEs are less commonly used for creating private scopes, but they are still useful in certain contexts.

//eg1
(function() {
  var x = 10;
  console.log(x); // Output: 10
})();
// x is not accessible outside the IIFE
console.log(x); // Error: x is not defined

//eg2
(function (x){
  console.log(x*x); //Output: 9
})(3); //we can pass argument over here (3)

//eg3
(function (x){
  (function (y){
  console.log(x*x); //Output:36  (happening closure)
})(3);
})(6);

//Q.5 what is Function Scope?

// The following variables are defined in the global scope
const num1 = 20;
const num2 = 3;
const name = "Chamakh";

// This function is defined in the global scope
function multiply() {
  return num1 * num2;
}

console.log(multiply()); // 60

// A nested function example
function getScore() {
  const num1 = 2;
  const num2 = 3;  //this num1 and num2 are shadowing over global scoped num1 and num2

  function add() {
    return `${name} scored ${num1 + num2}`;
  }

  return add();
}

console.log(getScore()); // "Chamakh scored 5"

//Q.6 Function Scope - O/P Based Question

//eg1
for(let i=0;i<5;i++){
  setTimeout(function (){
    console.log(i);
  }, i * 1000);
}
//'let' as the blocked scope so it will print 0 1 2 3 4.

//eg2
for(var i=0;i<5;i++){
  setTimeout(function (){
    console.log(i);
  }, i * 1000);
}
//'var' don't have blocked scope so it will print 5 5 5 5 5.


//Q7 Function Hoisting IMP Q

//note: function is total hoisted

name(); //output: Siddhesh
console.log(x) //output: undefined (because: x value get the momery but it value is not initialized)
name; //return as it is function in browsers console

var x = 100;
function name(){ 
  console.log("Siddhesh");
}

//Q8 Function Hoisting - O/P Based 

var x = 21;

var fun = function (){
   console.log(x); //Output: undefind
   var x = 20;
};

fun();

// Q.9 Params vs Arguments
function add(num){ //add(num) is called as parameter passed
  return num + num;
}

console.log(add(4));//add(4) is called as argument passed.

//Q10 rest and spread operator

let arr = [1,2];

function add(...nums){//add(...nums) here rest is used
  return nums[0]+nums[1];
}

console.log(mul(...arr));

//mul(...arr) here spread is used

//Q.11 rest and spread Op 

//this below code will be error because A rest parameter must be last in a parameter list.

// const fn = (a, ...numbers, x, y) => {
//   console.log(x,y);
// };

// fn(5,6,7,8);

//proper code

const fn2 = (a,x,y, ...numbers) => { //rest Op
  console.log(a,x,y,...numbers);//spread Op
};

fn2(5,6,7,8,5,7,8,9);

//Q12 Callback Function IMP Q

//A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.

//Callback Hell: Callback Hell is essentially nested callbacks stacked below one another forming a pyramid structure. Every callback depends/waits for the previous callback, thereby making a pyramid structure that affects the readability and maintainability of the code.

//hence callback hell is also called the “pyramid of the doom”

function msg(name){
   console.log(`Hello my name is ${name}`);
}

function input(callback){
  name1 = prompt("Enter your name:");
  callback(name1);
}

input(msg);

//Q13 Arrow Function IMP Q

//this function is introduced in ES6 version

//way 1 of writing 
const add = (num1, num2) => {
  return num1 + num2;
}
console.log(add(2,3));

// way 2 of writing
let adds = (num3, num4) => num3 + num4;

console.log(adds(4,3));

//Q14 this keyword IMP Q

let user = {
    username: "Siddhesh B",
    rc1: () => { //Arrow Fun
           console.log("Hi this is"+ this.username);
         },
    rc2(){ // regular Fun
           console..log("Hi this is"+ this.username);
    },
};

user.rc1(); //output: "undefind"    because in this 'this keyword' is pointing globally 
user.rc2(); //output: "Siddhesh B"  because in this 'this keyword' is pointing to user object